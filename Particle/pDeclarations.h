/// PDeclarations.h
///
/// Copyright 1997-2007, 2022 by David K. McAllister
///
/// Include this file in all applications that use the Particle System API.

#ifndef particle_declarations_h
#define particle_declarations_h

#include "Particle/pVec.h"

namespace PAPI {
/// This is the version number of this release of the API.
const int P_VERSION = 300;

typedef unsigned int pdata_t;

///< These are magic numbers that tell the action list compiler to get the value at runtime instead of action list compilation time.
#define P_VARYING_FLOAT -340282326356119256160033759537265639424.0f
#define P_VARYING_INT 0x7fffffce
#define P_VARYING_BOOL (bool)0xce

/// A very large float value used as a default arg passed into functions
const float P_MAXFLOAT = 1.0e16f; // Actually this must be < sqrt(MAXFLOAT) since we store this value squared.

/// A very small float value added to some physical calculations to dampen them and improve stability
const float P_EPS = 1e-3f;

/// This is the type of the particle birth and death callback functions that you can register.
typedef void (*P_PARTICLE_CALLBACK)(struct Particle_t& particle, const pdata_t data);

/// This is the type of the callback functions that you can register for the Callback() action.
typedef void (*P_PARTICLE_CALLBACK_ACTION)(struct Particle_t& particle, const pdata_t data, const float dt);

/// This is the type of the functions generated by EmitActionList(). You must pass a pointer to such a function into BindEmittedActionList().
typedef void (*P_PARTICLE_EMITTED_ACTION_LIST)(const void* A, void* P, const float dt, const int block_size);

/// These tell EmitActionList what kind of code to emit.
enum EmitCodeParams_e { P_INTERNAL_CODE = 0, P_CPU_CPP_CODE = 2 };
}; // namespace PAPI

#endif
